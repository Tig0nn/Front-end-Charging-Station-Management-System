import React, { useEffect, useState } from "react";
import {
  Table,
  Card,
  Button,
  Badge,
  ProgressBar,
  Spinner,
  Form,
} from "react-bootstrap";
import { data, Link } from "react-router-dom";
import "bootstrap-icons/font/bootstrap-icons.css";
import { stationsAPI } from "../../lib/apiServices";
import { staffAPI } from "../../lib/apiServices";

const StationsList = () => {
  const [stations, setStations] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState("");

  // State qu·∫£n l√Ω c·∫≠p nh·∫≠t tr·∫°m
  const [editingId, setEditingId] = useState(null);
  const [editData, setEditData] = useState({});

  // State danh s√°ch nh√¢n vi√™n
  const [searchText, setSearchText] = useState([]);
  // State t√¨m ki·∫øm nh√¢n vi√™n
  const [searchStaff, setSearchStaff] = useState("");
  //qu·∫£n l√Ω danh s√°ch nh√¢n vi√™n
  const [staffs, setStaffs] = useState([]);
  const [loadingStaff, setLoadingStaff] = useState(true);

  // Khi b·∫•m n√∫t "Ch·ªânh s·ª≠a"
  const handleEditClick = (station) => {
    setEditingId(station.stationId);
    setEditData({ ...station });
  };

  // Khi thay ƒë·ªïi d·ªØ li·ªáu trong √¥ input
  const handleChangeEdit = (e) => {
    const { name, value } = e.target;
    setEditData((prev) => ({ ...prev, [name]: value }));
  };

  // Khi b·∫•m "L∆∞u"
  const handleSave = async () => {
    try {
      const dataToSend = {
        ...editData,
        totalPoints: Number(editData.totalPoints || 0),
        activePoints: Number(editData.activePoints || 0),
        maintenancePoints: Number(editData.maintenancePoints || 0),
      };

      await stationsAPI.update(editingId, dataToSend);
      alert("C·∫≠p nh·∫≠t th√†nh c√¥ng!");

      setStations((prev) =>
        prev.map((s) => (s.stationId === editingId ? dataToSend : s))
      );
      setEditingId(null);
    } catch (err) {
      console.error("L·ªói khi c·∫≠p nh·∫≠t:", err);
      alert("Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tr·∫°m s·∫°c!");
    }
  };

  // Khi b·∫•m "H·ªßy"
  const handleCancel = () => {
    setEditingId(null);
    setEditData({});
  };

  // G·ªçi api x√≥a tr·∫°m
  const handleDelete = async (stationId) => {
    if (!window.confirm("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a tr·∫°m s·∫°c n√†y kh√¥ng?"))
      return;

    try {
      await stationsAPI.delete(stationId);
      alert(" X√≥a tr·∫°m s·∫°c th√†nh c√¥ng!");
      setStations((prev) => prev.filter((s) => s.stationId !== stationId));
    } catch (err) {
      console.error(" L·ªói khi x√≥a tr·∫°m:", err);
      alert("Kh√¥ng th·ªÉ x√≥a tr·∫°m s·∫°c. Vui l√≤ng th·ª≠ l·∫°i!");
    }
  };

  // Fetch danh s√°ch nh√¢n vi√™n
  useEffect(() => {
    const fetchStaff = async () => {
      try {
        const res = await staffAPI.getAllStaffs();
        setStaffs(res.data.result || []);
        setSearchStaff(res.data.result || []);
      } catch (err) {
        console.error("L·ªói khi t·∫£i danh s√°ch nh√¢n vi√™n:", err);
      } finally {
        setLoadingStaff(false);
      }
    };
    fetchStaff();
  }, []);

  //  L·ªçc danh s√°ch staff khi searchText thay ƒë·ªïi
  useEffect(() => {
    const filtered = staffs.filter((s) => {
      const name = (s.fullName || s.name || "").toLowerCase();
      return name.includes(searchText.toLowerCase());
    });
    setSearchStaff(filtered);
  }, [searchText, staffs]);

  //  G·ªçi API l·∫•y danh s√°ch tr·∫°m khi component mount
  useEffect(() => {
    const fetchStations = async () => {
      try {
        setLoading(true);
        const res = await stationsAPI.getAll(1, 100);
        console.log("API raw response:", res.data);
        // N·∫øu backend tr·∫£ v·ªÅ d·∫°ng {data: [...]}
        const data = res.data.result;
        console.log("Danh s√°ch tr·∫°m s·∫°c:", data);
        setStations(data);
      } catch (err) {
        console.error(" L·ªói t·∫£i tr·∫°m s·∫°c:", err);
        setError("Kh√¥ng th·ªÉ t·∫£i danh s√°ch tr·∫°m s·∫°c.");
      } finally {
        setLoading(false);
      }
    };
    fetchStations();
  }, []);

  //  Format ti·ªÅn t·ªá
  const formatCurrency = (amount) =>
    new Intl.NumberFormat("vi-VN", {
      style: "currency",
      currency: "VND",
    }).format(amount || 0);

  //  Badge tr·∫°ng th√°i
  const getStatusBadge = (status) => {
    switch (status) {
      case "OPERATIONAL":
        return <Badge bg="success">Ho·∫°t ƒë·ªông</Badge>;
      case "MAINTENANCE":
        return <Badge bg="warning">B·∫£o tr√¨</Badge>;
      case "CLOSED":
        return <Badge bg="danger">ƒê√≥ng c·ª≠a</Badge>;
      case "OUT_OF_SERVICE":
        return <Badge bg="danger">Ng∆∞ng ho·∫°t ƒë·ªông</Badge>;
      default:
        return <Badge bg="secondary">Kh√¥ng x√°c ƒë·ªãnh</Badge>;
    }
  };

  // üîπ M√†u thanh ti·∫øn tr√¨nh
  const getUtilizationColor = (utilization) => {
    if (utilization >= 80) return "success";
    if (utilization >= 60) return "info";
    if (utilization >= 40) return "warning";
    return "danger";
  };

  //  ƒêang t·∫£i
  if (loading) {
    return (
      <div className="text-center py-5">
        <Spinner animation="border" variant="primary" />
        <div className="mt-2 text-muted">ƒêang t·∫£i danh s√°ch tr·∫°m...</div>
      </div>
    );
  }

  return (
    <div>
      {/* Header */}
      <div className="mb-4 d-flex justify-content-between align-items-center">
        <div>
          <h2 className="mb-1">Qu·∫£n l√Ω tr·∫°m s·∫°c </h2>
          <p className="text-muted mb-0">
            Theo d√µi v√† qu·∫£n l√Ω t·∫•t c·∫£ tr·∫°m s·∫°c trong h·ªá th·ªëng
          </p>
        </div>
        <Button
          as={Link}
          to="/admin/stations/add"
          variant="primary"
          className="d-flex align-items-center gap-2"
        >
          <i className="bi bi-plus-lg"></i>
          Th√™m tr·∫°m s·∫°c
        </Button>
      </div>

      {/* Error */}
      {error && <div className="alert alert-danger">{error}</div>}

      {/* B·∫£ng tr·∫°m s·∫°c */}
      <Card className="border-0 shadow-sm">
        <Card.Body className="p-0">
          <div className="table-responsive">
            <Table hover className="mb-0">
              <thead className="table-light">
                <tr>
                  <th className="px-4 py-3">T√™n tr·∫°m</th>
                  <th className="px-2 py-3 text-center">Tr·∫°ng th√°i</th>
                  <th className="px-2 py-3 text-center">ƒêi·ªÉm s·∫°c</th>
                  <th className="px-2 py-3 text-end">Doanh thu</th>
                  <th className="px-2 py-3 text-center">S·ª≠ d·ª•ng</th>
                  <th className="px-2 py-3">Ch·ªß</th>
                  <th className="px-2 py-3 text-center">Nh√¢n vi√™n</th>
                  <th className="px-4 py-3 text-center">Thao t√°c</th>
                </tr>
              </thead>
              <tbody>
                {/* n·∫øu c√≥ tr·∫°m th√¨ hi·ªÉn th·ªã  */}

                {stations.length > 0 ? (
                  stations.map((station) => (
                    <tr key={station.stationId} className="align-middle">
                      {/* T√™n tr·∫°m v√† ƒë·ªãa ch·ªâ */}
                      <td className="px-4 align-middle">
                        {editingId === station.stationId ? (
                          <>
                            <Form.Control
                              type="text"
                              name="name"
                              value={editData.name || ""}
                              onChange={handleChangeEdit}
                              placeholder="T√™n tr·∫°m"
                              className="mb-2"
                            />
                            <Form.Control
                              type="text"
                              name="address"
                              value={editData.address || ""}
                              onChange={handleChangeEdit}
                              placeholder="V·ªã tr√≠ / ƒê·ªãa ch·ªâ"
                            />
                          </>
                        ) : (
                          <>
                            <div className="fw-semibold">{station.name}</div>
                            <div className="text-muted small">
                              <i className="bi bi-geo-alt me-1"></i>
                              {station.address || "Ch∆∞a c√≥ ƒë·ªãa ch·ªâ"}
                            </div>
                          </>
                        )}
                      </td>

                      {/* Tr·∫°ng th√°i */}
                      <td className="text-center">
                        {editingId === station.stationId ? (
                          <Form.Select
                            name="status"
                            value={editData.status}
                            onChange={handleChangeEdit}
                          >
                            <option value="OPERATIONAL">Ho·∫°t ƒë·ªông</option>
                            <option value="MAINTENANCE">B·∫£o tr√¨</option>
                            <option value="OUT_OF_SERVICE">
                              Ng∆∞ng ho·∫°t ƒë·ªông
                            </option>
                            <option value="CLOSED">ƒê√≥ng c·ª≠a</option>
                          </Form.Select>
                        ) : (
                          getStatusBadge(station.status)
                        )}
                      </td>

                      {/* Th√¥ng tin ƒëi·ªÉm s·∫°c */}
                      <td className="text-center small">
                        <>
                          <div className="fw-semibold text-success">
                            T·ªïng: {station.totalPoints || 0}
                          </div>
                          <div className="mt-1">
                            Ho·∫°t ƒë·ªông: {station.activePoints || 0} / B·∫£o tr√¨:{" "}
                            {station.maintenancePoints || 0}
                          </div>
                        </>
                      </td>

                      <td className="text-end text-success">
                        {formatCurrency(station.revenue) || 0}
                      </td>

                      {/* Thanh ti·∫øn tr√¨nh s·ª≠ d·ª•ng */}
                      <td className="text-center">
                        <ProgressBar
                          now={station.utilization || 0}
                          variant={getUtilizationColor(
                            station.utilization || 0
                          )}
                          style={{ width: "80px", height: "6px" }}
                          className="mx-auto"
                        />
                        <small>{station.utilization || 0}%</small>
                      </td>

                      <td>
                        {editingId === station.stationId ? (
                          <Form.Control
                            type="text"
                            name="operatorName"
                            value={editData.operatorName || ""}
                            onChange={handleChangeEdit}
                          />
                        ) : (
                          station.operatorName || "Ch∆∞a c√≥"
                        )}
                      </td>

                      {/* Ch·ª©c nƒÉng t√¨m ki·∫øm nh√¢n vi√™n */}
                      <td className="text-center">
                        {editingId === station.stationId ? (
                          <>
                            <Form.Control
                              type="text"
                              placeholder="T√¨m ki·∫øm nh√¢n vi√™n..."
                              value={searchText}
                              onChange={(e) => setSearchText(e.target.value)}
                              className="mb-2"
                            />
                            <Form.Select
                              name="staffId"
                              value={searchStaff.staffId}
                              onChange={(e) => setSearchStaff({ ...searchStaff, staffId: e.target.value }) }
                              required
                            >
                              <option value="">
                                -- Ch·ªçn nh√¢n vi√™n ph·ª• tr√°ch --
                              </option>
                              {searchStaff.map((s) => (
                                <option key={s.id} value={s.id}>
                                  {s.fullName}
                                </option>
                              ))}
                            </Form.Select>
                          </>
                        ) : (
                          station.staffName || "Ch∆∞a c√≥ nh√¢n vi√™n"
                        )}
                      </td>

                      {/* N√∫t thao t√°c */}
                      <td className="text-center">
                        <div className="d-flex gap-1 justify-content-center">
                          {editingId === station.stationId ? (
                            <>
                              {/** N√∫t l∆∞u */}
                              <Button
                                variant="success"
                                size="sm"
                                title="L∆∞u"
                                onClick={handleSave}
                              >
                                <i className="bi bi-check-lg"></i>
                              </Button>
                              {/** N√∫t h·ªßy */}
                              <Button
                                variant="secondary"
                                size="sm"
                                title="H·ªßy"
                                onClick={handleCancel}
                              >
                                <i className="bi bi-x-lg"></i>
                              </Button>
                            </>
                          ) : (
                            <>
                              {/* N√∫t ch·ªânh s·ª≠a */}
                              <Button
                                variant="outline-primary"
                                size="sm"
                                title="Ch·ªânh s·ª≠a"
                                onClick={() => handleEditClick(station)}
                              >
                                <i className="bi bi-pencil"></i>
                              </Button>
                              {/* N√∫t x√≥a */}
                              <Button
                                variant="outline-danger"
                                size="sm"
                                title="X√≥a"
                                onClick={() => handleDelete(station.stationId)}
                              >
                                <i className="bi bi-trash"></i>
                              </Button>
                            </>
                          )}
                        </div>
                      </td>
                    </tr>
                  ))
                ) : (
                  <tr>
                    {/* N·∫øu kh√¥ng c√≥ tr·∫°m n√†o */}
                    <td colSpan="7" className="text-center text-muted py-4">
                      Kh√¥ng c√≥ tr·∫°m s·∫°c n√†o.
                    </td>
                  </tr>
                )}
              </tbody>
            </Table>
          </div>
        </Card.Body>
      </Card>
    </div>
  );
};
export default StationsList;
