import React, { useEffect, useState } from "react";
import { Table, Card, Button, Badge, ProgressBar, Spinner } from "react-bootstrap";
import { Link } from "react-router-dom";
import "bootstrap-icons/font/bootstrap-icons.css";
import { stationsAPI } from "../../lib/apiServices"; 

const StationsList = () => {
  const [stations, setStations] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState("");

  
  //  G·ªçi API l·∫•y danh s√°ch tr·∫°m s·∫°c
  useEffect(() => {
    const fetchStations = async () => {
      try {
        setLoading(true);
        const res = await stationsAPI.getAll(1, 100);
        // N·∫øu backend tr·∫£ v·ªÅ d·∫°ng {data: [...]}
        const data = res.data.result;
        setStations(data);
      } catch (err) {
        console.error(" L·ªói t·∫£i tr·∫°m s·∫°c:", err);
        setError("Kh√¥ng th·ªÉ t·∫£i danh s√°ch tr·∫°m s·∫°c.");
        setStations(fallbackStations);
      } finally {
        setLoading(false);
      }
    };
    fetchStations();
  }, []);

  //  Format ti·ªÅn t·ªá
  const formatCurrency = (amount) =>
    new Intl.NumberFormat("vi-VN", {
      style: "currency",
      currency: "VND",
    }).format(amount || 0);

  //  Badge tr·∫°ng th√°i
  const getStatusBadge = (status) => {
    switch (status) {
      case "active":
        return <Badge bg="success">Ho·∫°t ƒë·ªông</Badge>;
      case "maintenance":
        return <Badge bg="warning">B·∫£o tr√¨</Badge>;
      case "inactive":
        return <Badge bg="danger">Ng∆∞ng ho·∫°t ƒë·ªông</Badge>;
      default:
        return <Badge bg="secondary">Kh√¥ng x√°c ƒë·ªãnh</Badge>;
    }
  };

  // üîπ M√†u thanh ti·∫øn tr√¨nh
  const getUtilizationColor = (utilization) => {
    if (utilization >= 80) return "success";
    if (utilization >= 60) return "info";
    if (utilization >= 40) return "warning";
    return "danger";
  };

  // üîπ ƒêang t·∫£i
  if (loading) {
    return (
      <div className="text-center py-5">
        <Spinner animation="border" variant="primary" />
        <div className="mt-2 text-muted">ƒêang t·∫£i danh s√°ch tr·∫°m...</div>
      </div>
    );
  }

  return (
    <div>
      {/* Header */}
      <div className="mb-4 d-flex justify-content-between align-items-center">
        <div>
          <h2 className="mb-1">Qu·∫£n l√Ω tr·∫°m s·∫°c</h2>
          <p className="text-muted mb-0">
            Theo d√µi v√† qu·∫£n l√Ω t·∫•t c·∫£ tr·∫°m s·∫°c trong h·ªá th·ªëng
          </p>
        </div>
        <Button
          as={Link}
          to="/admin/stations/add"
          variant="primary"
          className="d-flex align-items-center gap-2"
        >
          <i className="bi bi-plus-lg"></i>
          Th√™m tr·∫°m s·∫°c
        </Button>
      </div>

      {/* Error */}
      {error && <div className="alert alert-danger">{error}</div>}

      {/* B·∫£ng tr·∫°m s·∫°c */}
      <Card className="border-0 shadow-sm">
        <Card.Body className="p-0">
          <div className="table-responsive">
            <Table hover className="mb-0">
              <thead className="table-light">
                <tr>
                  <th className="px-4 py-3">T√™n tr·∫°m</th>
                  <th className="px-2 py-3 text-center">Tr·∫°ng th√°i</th>
                  <th className="px-2 py-3 text-center">ƒêi·ªÉm s·∫°c</th>
                  <th className="px-2 py-3 text-end">Doanh thu</th>
                  <th className="px-2 py-3 text-center">S·ª≠ d·ª•ng</th>
                  <th className="px-2 py-3">Nh√¢n vi√™n</th>
                  <th className="px-4 py-3 text-center">Thao t√°c</th>
                </tr>
              </thead>
              <tbody>
                {stations.length > 0 ? (
                  stations.map((station) => (
                    <tr key={station.stationId} className="align-middle">
                      <td>
                        <div className="fw-semibold text-dark">{station.name}</div>
                        <div className="text-muted small">{"backend ch∆∞a c√≥"}</div>
                      </td>

                      <td className="text-center">{getStatusBadge(station.status)}</td>

                      <td className="text-center small">
                        <div className="fw-semibold text-success">
                          T·ªïng: {"ch∆∞a l√†m" || 0}
                        </div>
                        <div className="mt-1">
                          Ho·∫°t ƒë·ªông: {"ch∆∞a l√†m" || 0}
                          {" / "}
                          B·∫£o tr√¨: {"ch∆∞a l√†m" || 0}
                        </div>
                      </td>

                      <td className="text-end text-success">
                        {/*formatCurrency(station.revenue)*/}
                      </td>

                      <td className="text-center">
                        <ProgressBar
                          now={station.utilization || 0}
                          variant={getUtilizationColor("ch∆∞a l√†m" || 0)}
                          style={{ width: "80px", height: "6px" }}
                          className="mx-auto"
                        />
                        <small>{station.utilization || 0}%</small>
                      </td>

                      <td>{station.manager || "Ch∆∞a c√≥"}</td>

                      <td className="text-center">
                        <div className="d-flex gap-1 justify-content-center">
                          <Button variant="outline-primary" size="sm" title="Ch·ªânh s·ª≠a">
                            <i className="bi bi-pencil"></i>
                          </Button>
                          <Button variant="outline-secondary" size="sm" title="C√†i ƒë·∫∑t">
                            <i className="bi bi-gear"></i>
                          </Button>
                        </div>
                      </td>
                    </tr>
                  ))
                ) : (
                  <tr>
                    <td colSpan="7" className="text-center text-muted py-4">
                      Kh√¥ng c√≥ tr·∫°m s·∫°c n√†o.
                    </td>
                  </tr>
                )}
              </tbody>
            </Table>
          </div>
        </Card.Body>
      </Card>
    </div>
  );
};

export default StationsList;
