// src/pages/StationOverview.jsx
import React from "react";
import { Container, Row, Col, Card, Button, Badge } from "react-bootstrap";
import { chargingPointsAPI } from "../../lib/apiServices.js";
import { useState, useEffect } from "react";
// Mock data (c√≥ th·ªÉ fetch API sau)


const stations = [
  {
    id: 1,
    name: "ƒêi·ªÉm s·∫°c #1",
    power: "50kW",
    type: "CCS",
    status: "ƒêang s·∫°c",
    user: "Nguy·ªÖn VƒÉn An",
    startTime: "14:30",
    percent: 65,
    cost: "45.000ƒë",
    maintenance: "15/9/2024",
  },
  {
    id: 2,
    name: "ƒêi·ªÉm s·∫°c #2",
    power: "50kW",
    type: "CCS",
    status: "S·∫µn s√†ng",
    maintenance: "20/9/2024",
  },
  {
    id: 3,
    name: "ƒêi·ªÉm s·∫°c #3",
    power: "120kW",
    type: "CCS",
    status: "ƒêang s·∫°c",
    user: "Tr·∫ßn Th·ªã B√¨nh",
    startTime: "15:15",
    percent: 80,
    cost: "82.000ƒë",
    maintenance: "18/9/2024",
  },
  {
    id: 4,
    name: "ƒêi·ªÉm s·∫°c #4",
    power: "50kW",
    type: "CHAdeMO",
    status: "Offline",
    maintenance: "10/9/2024",
  },
  {
    id: 5,
    name: "ƒêi·ªÉm s·∫°c #5",
    power: "120kW",
    type: "CCS",
    status: "S·∫µn s√†ng",
    maintenance: "25/9/2024",
  },
  {
    id: 6,
    name: "ƒêi·ªÉm s·∫°c #6",
    power: "50kW",
    type: "CCS",
    status: "B·∫£o tr√¨",
    maintenance: "1/10/2024",
  },
];



export default function StationOverview() {
  // State ƒë·ªÉ l∆∞u danh s√°ch tr·ª• s·∫°c t·ª´ API
  const [chargingPoints, setChargingPoints] = useState([]);
  // State ƒë·ªÉ qu·∫£n l√Ω tr·∫°ng th√°i t·∫£i d·ªØ li·ªáu
  const [loading, setLoading] = useState(true);
  // State ƒë·ªÉ l∆∞u th√¥ng b√°o l·ªói n·∫øu c√≥
  const [error, setError] = useState(null);


  // H√†m l·∫•y m√†u theo tr·∫°ng th√°i
const getStatusBadge = (status) => {
  switch (status) {
    case "ƒêang s·∫°c":
      return <Badge bg="success">ƒêang s·∫°c</Badge>;
    case "S·∫µn s√†ng":
      return <Badge bg="primary">S·∫µn s√†ng</Badge>;
    case "Offline":
      return <Badge bg="danger">Offline</Badge>;
    case "B·∫£o tr√¨":
      return (
        <Badge bg="warning" text="dark">
          B·∫£o tr√¨
        </Badge>
      );
    default:
      return <Badge bg="secondary">{status}</Badge>;
  }
};

const idStation = "a09fc6f4-aba2-11f0-bfb5-a2aa8cd208e5"; // ID tr·∫°m s·∫°c m·∫´u

  useEffect(() => {
    const fetchChargingPoints = async () => {
      if (!idStation) {
        setError("Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c ID c·ªßa tr·∫°m s·∫°c.");
        setLoading(false);
        return;
      }

      try {
        setLoading(true);
        setError(null);
        // G·ªçi API th·∫≠t b·∫±ng h√†m b·∫°n ƒë√£ ch·ªâ ƒë·ªãnh
        const response = await chargingPointsAPI.getChargersByStation(
          managedStationId
        );

        if (response.data && response.data.result) {
          // L∆∞u d·ªØ li·ªáu v√†o state
          setChargingPoints(response.data.result);
        } else {
          setChargingPoints([]);
        }
      } catch (err) {
        console.error("Error fetching charging points:", err);
        setError("Kh√¥ng th·ªÉ t·∫£i danh s√°ch tr·ª• s·∫°c. Vui l√≤ng th·ª≠ l·∫°i.");
        setChargingPoints([]);
      } finally {
        setLoading(false);
      }
    };

    fetchChargingPoints();
  }, []); // Ch·ªâ ch·∫°y 1 l·∫ßn khi component ƒë∆∞·ª£c render

  return (
    <Container className="py-4">
      <h4 className="mb-2">Tr·∫°m s·∫°c: Vincom ƒê·ªìng Kh·ªüi</h4>
      <p className="text-muted">72 L√™ Th√°nh T√¥n, Qu·∫≠n 1, TP.HCM</p>

      {/* T·ªïng quan */}
      <Row className="mb-4">
        <Col md={3}>
          <Card className="text-center shadow-sm">
            <Card.Body>
              <h6 className="text-muted">ƒêi·ªÉm s·∫°c ho·∫°t ƒë·ªông</h6>
              <h4>4/6</h4>
            </Card.Body>
          </Card>
        </Col>
        <Col md={3}>
          <Card className="text-center shadow-sm">
            <Card.Body>
              <h6 className="text-muted">Phi√™n s·∫°c h√¥m nay</h6>
              <h4>23</h4>
            </Card.Body>
          </Card>
        </Col>
        <Col md={3}>
          <Card className="text-center shadow-sm">
            <Card.Body>
              <h6 className="text-muted">Doanh thu h√¥m nay</h6>
              <h4>2.450.000ƒë</h4>
            </Card.Body>
          </Card>
        </Col>
        <Col md={3}>
          <Card className="text-center shadow-sm">
            <Card.Body>
              <h6 className="text-muted">Th·ªùi gian TB</h6>
              <h4>52 ph√∫t</h4>
            </Card.Body>
          </Card>
        </Col>
      </Row>

      {/* Danh s√°ch ƒëi·ªÉm s·∫°c */}
      <Row xs={1} md={2} lg={3} className="g-3">
        {stations.map((s) => (
          <Col key={s.id}>
            <Card className="h-100 shadow-sm">
              <Card.Body>
                <div className="d-flex justify-content-between align-items-center mb-2">
                  <h6 className="mb-0">{s.name}</h6>
                  {getStatusBadge(s.status)}
                </div>

                <div className="text-muted small mb-2">
                  ‚ö° {s.power} &nbsp; | &nbsp; üîå {s.type}
                </div>

                {s.status === "ƒêang s·∫°c" && (
                  <div className="bg-success bg-opacity-10 p-2 rounded mb-3">
                    <div className="fw-bold">{s.user}</div>
                    <div className="small text-muted">
                      B·∫Øt ƒë·∫ßu: {s.startTime} ‚Äî {s.percent}%
                    </div>
                    <div className="fw-semibold">{s.cost}</div>
                  </div>
                )}

                {s.status === "Offline" && (
                  <div className="text-center text-danger py-3">
                    Kh√¥ng k·∫øt n·ªëi
                  </div>
                )}

                {s.status === "B·∫£o tr√¨" && (
                  <div className="text-center text-warning py-3">
                    ƒêang b·∫£o tr√¨
                  </div>
                )}

                <div className="d-flex gap-2">
                  <Button
                    variant={s.status === "ƒêang s·∫°c" ? "light" : "dark"}
                    disabled={s.status === "Offline" || s.status === "B·∫£o tr√¨"}
                    className="w-50"
                  >
                    {s.status === "ƒêang s·∫°c" ? "D·ª´ng s·∫°c" : "Kh·ªüi ƒë·ªông"}
                  </Button>
                  <Button variant="outline-secondary" className="w-50">
                    Chi ti·∫øt
                  </Button>
                </div>
              </Card.Body>
              <Card.Footer className="text-muted small">
                B·∫£o tr√¨ cu·ªëi: {s.maintenance}
              </Card.Footer>
            </Card>
          </Col>
        ))}
      </Row>
    </Container>
  );
}
